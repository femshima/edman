name: Release

on:
  push: 
    branches:
      - 'release-ci'
  release:
    types: [published]

jobs:
  build:
    name: Build
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Windows Cross Compiler
        if: ${{ contains(matrix.target, 'windows') }}
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
            toolchain: stable
            targets: ${{ matrix.target }}
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run:
          cargo build --release --target=${{ matrix.target }}

      - name: Create Zip File
        run: |
          zip ${{ matrix.target }} README.md LICENSE

          cargo metadata --no-deps --format-version 1 \
          | jq -r '.packages[] | .targets[] | select(.kind[0] == "bin") | .name' \
          | while read s; do echo "target/${{ matrix.target }}/release/$s"{,.exe}; done \
          | xargs zip --verbose --update --junk-paths ${{ matrix.target }}

      - uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.target }}
          path: ${{ matrix.target }}.zip

  upload-assets:
    name: Upload Assets
    runs-on: ubuntu-22.04
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Upload prebuild asset
        uses: icrawl/action-artifact@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: '*/*.zip'
